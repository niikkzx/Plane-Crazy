local Player = game.Players.LocalPlayer
local PixelsFrame = Player.PlayerGui:FindFirstChild("DrawMenu.V4").Frame.Pixels
-- Controls

local Buttons = Instance.new("ScreenGui")
local D = Instance.new("TextButton")
local S = Instance.new("TextButton")
local W = Instance.new("TextButton")
local A = Instance.new("TextButton")

local MAPX = 25
local MAPY = MAPX


-- SnakeConfig
local snake = {x = math.random(1,MAPX),y = math.random(1,MAPY)}
local lenght = 1
local segments = {snake}
local snake_dir = {x=0,y=0}
local food = {x = math.random(1,MAPX),y = math.random(1,MAPY)}
local dirs = {dW=1,dS=1,dA=1,dD=1}
-- Time
time_,time_step = 0,0.1



--local function olddraw(x,y,color)

--	if not PixelsFrame:FindFirstChild(x+(y*MAPX)) then return end
--	PixelsFrame:FindFirstChild(x+(y*MAPX)).BackgroundColor3 = color or Color3.new(1,1,1)
--end

local function draw(x,y,color)

	if not PixelsFrame:FindFirstChild("p"..y.."."..x) then return end
	PixelsFrame:FindFirstChild("p"..y.."."..x).BackgroundColor3 = color or Color3.new(1,1,1)
end


local function fill(color)
	for i,v in pairs(PixelsFrame:GetChildren()) do
		if v:IsA("Frame") or v:IsA("TextButton") then
			v.BackgroundColor3 = color or Color3.new()
		end
	end
end



--- Controls



Buttons.Name = "Buttons"
Buttons.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

D.Name = "D"
D.Parent = Buttons
D.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
D.Position = UDim2.new(0.839857638, 0, 0.636904776, 0)
D.Size = UDim2.new(0, 52, 0, 50)
D.Text = "D"
D.TextColor3 = Color3.fromRGB(255, 255, 255)
D.TextScaled = true

S.Name = "S"
S.Parent = Buttons
S.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
S.Position = UDim2.new(0.793594301, 0, 0.736111104, 0)
S.Size = UDim2.new(0, 52, 0, 50)
S.Text = "S"
S.TextColor3 = Color3.fromRGB(255, 255, 255)
S.TextScaled = true


W.Name = "W"
W.Parent = Buttons
W.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
W.Position = UDim2.new(0.793594301, 0, 0.537698388, 0)
W.Size = UDim2.new(0, 52, 0, 50)
W.Text = "W"
W.TextColor3 = Color3.fromRGB(255, 255, 255)
W.TextScaled = true

A.Name = "A"
A.Parent = Buttons
A.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
A.Position = UDim2.new(0.747330964, 0, 0.636904776, 0)
A.Size = UDim2.new(0, 52, 0, 50)
A.Text = "A"
A.TextColor3 = Color3.fromRGB(255, 255, 255)
A.TextScaled = true


W.MouseButton1Click:Connect(function()
	if dirs.dW == 1 then
		snake_dir = {x = 0,y = -1}
		dirs = {dW=1,dS=0,dA=1,dD=1}
	end

end)
S.MouseButton1Click:Connect(function()
	if dirs.dS == 1 then
		snake_dir = {x = 0,y = 1}
		dirs = {dW=0,dS=1,dA=1,dD=1}
	end


end)
A.MouseButton1Click:Connect(function()

	if dirs.dA == 1 then
		snake_dir = {x = -1,y = 0}
		dirs = {dW=1,dS=1,dA=1,dD=0}
	end
end)
D.MouseButton1Click:Connect(function()

	if dirs.dD == 1 then
		snake_dir = {x = 1,y = 0}
		dirs = {dW=1,dS=1,dA=0,dD=1}
	end
end)

--Movement Controller
local function reset()
	snake = {x = math.random(1,MAPX),y = math.random(1,MAPY)}
	food = {x = math.random(1,MAPX),y = math.random(1,MAPY)}
	lenght = 1
	segments = {snake}
	snake_dir = {x=0,y=0}
	dirs = {dW=1,dS=1,dA=1,dD=1}
end

local function self_eat(set)
	table.remove(set,#set)
	for i,v in pairs(set) do
		if snake.x == v.x and v.y == snake.y then
			return true
		end 
	end

	return false
end


local function Post(tabela)
	local args = {
		[1] = {
			["Metadata"] = {
				["RowCount"] = 25,
				["ColumnCount"] = 25
			},
			["GridMap"] = tabela
		},
		[2] = ""
	}

	game:GetService("ReplicatedStorage").DrawingRemotes.Morph:InvokeServer(unpack(args))
end



while wait(5) do
	fill()

	local self_eating = self_eat(table.clone(segments))



	if self_eating == true then
		reset()
	elseif snake.y < 0 then
		reset()
	elseif  snake.y >= MAPY then
		reset()
	elseif  snake.x < 1 then
		reset()
	elseif snake.x > MAPX then
		reset()

	end




	if snake.x == food.x and food.y == snake.y then
		food = {x = math.random(1,MAPX),y = math.random(1,MAPY)}
		lenght += 1
	end

	draw(food.x,food.y,Color3.new(1,0,0))
	for i,v in pairs(segments) do
		draw(v.x,v.y,Color3.new(0,1,0))
	end
	
	local finalTable = {}
	
	for finy = 1,MAPY,1 do
		for finx = 1,MAPX,1 do
			local pixel = PixelsFrame:FindFirstChild("p"..finy.."."..finx)
			local colorsTable = {
				["Green"] = pixel.BackgroundColor3.G,
				["Blue"] = pixel.BackgroundColor3.B,
				["Red"] = pixel.BackgroundColor3.R
			}
			
			finalTable[finy] = {}
			finalTable[finy][finx] = colorsTable
			
		end
	end
	
	Post(finalTable)



	time_now = tick()
	if (time_now - time_) > time_step then
		time_ = time_now
		local new = {x = snake.x,y= snake.y}
		new.y += snake_dir.y
		new.x += snake_dir.x
		snake = new
		table.insert(segments,snake)

		for i = 1 ,#segments - lenght do
			table.remove(segments,i)

		end
	end

end
